{"version":3,"sources":["webpack:///webpack/bootstrap d980bbec356b5650364b","webpack:///./index.js"],"names":["GlobalRule","assumeGlobal","sub","name","Acl","strict","rules","Map","policies","registry","WeakMap","verbs","subject","test","subjectName","subjectMapper","verbs_","Array","isArray","forEach","get","verb","set","policy","policy_","klass","user","Error","args","beforeAll","result","Boolean","subjects","some","can","s","every","User","acl","prototype","arguments","isFun","has","constructor","delete","removeRules","removePolicy"],"mappings":"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","file":"browser-acl.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d980bbec356b5650364b","\nexport const GlobalRule = 'GLOBAL_RULE'\n\nconst assumeGlobal = sub =>\n  typeof sub === 'boolean' ||\n  typeof sub === 'undefined' ||\n  (typeof sub === 'function' && sub.name === '')\n\n/**\n * Simple ACL library for the browser inspired by Laravel's guards and policies.\n */\nexport default class Acl {\n\n  /**\n   * browser-acl\n   *\n   * @access public\n   * @param {Object} options\n   * @param {Boolean} {strict=false}={} Errors out on unknown verbs when true\n   * @returns {Acl}\n   */\n  constructor({strict = false} = {}) {\n    this.strict = strict\n    this.rules = new Map()\n    this.policies = new Map()\n    this.registry = new WeakMap()\n  }\n\n  /**\n   * You add rules by providing a verb, a subject and an optional\n   * test (that otherwise defaults to true).\n   *\n   * If the test is a function it will be evaluated with the params:\n   * user, subject, and subjectName. The test value is ultimately evaluated\n   * for truthiness.\n   *\n   * Examples:\n   *\n   * ```javascript\n   * acl.rule('create', Post)\n   * acl.rule('edit', Post, (user, post) => post.userId === user.id)\n   * acl.rule('edit', Post, (user, post, verb, additionalParameter, secondAdditionalParameter) => true)\n   * acl.rule('delete', Post, false) // deleting disabled\n   * acl.rule('purgeInactive', user => user.isAdmin) // global rule\n   * ```\n   *\n   * @access public\n   * @param {Array<string>|string} verbs\n   * @param {Function|Object|string} subject?\n   * @param {Boolean|Function} test=true\n   * @returns {Acl}\n   */\n  rule(verbs, subject, test = true) {\n    if (assumeGlobal(subject)) {\n      test = typeof subject === 'undefined' ? true : subject\n      subject = GlobalRule\n    }\n    const subjectName = this.subjectMapper(subject)\n    const verbs_ = Array.isArray(verbs) ? verbs : [verbs]\n    verbs_.forEach(verb => {\n      const rules = this.rules.get(subjectName) || {}\n      rules[verb] = test\n      this.rules.set(subjectName, rules)\n    })\n    return this\n  }\n\n  /**\n   * You can group related rules into policies for a subject. The policies\n   * properties are verbs and they can plain values or functions.\n   *\n   * If the policy is a function it will be new'ed up before use.\n   *\n   * ```javascript\n   *   class Post {\n   *     constructor() {\n   *       this.view = true       // no need for a functon\n   *       this.delete = false    // not really necessary since an abscent\n   *                              // verb has the same result\n   *     }\n   *     beforeAll(verb, user, ...theRest) {\n   *       if (user.isAdmin) {\n   *         return true\n   *       }\n   *       // return nothing (undefined) to pass it on to the other rules\n   *     }\n   *     edit(user, post, verb, additionalParameter, secondAdditionalParameter) {\n   *       return post.id === user.id\n   *     }\n   *   }\n   * ```\n   *\n   * Policies are useful for grouping rules and adding more complex logic.\n   *\n   * @access public\n   * @param {Object} policy A policy with properties that are verbs\n   * @param {Function|Object|string} subject\n   * @returns {Acl}\n   */\n  policy(policy, subject) {\n    const policy_ = typeof policy === 'function' ? new policy() : policy\n    const subjectName = this.subjectMapper(subject)\n    this.policies.set(subjectName, policy_)\n    return this\n  }\n\n  /**\n   * Explicitly map a class or constructor function to a name.\n   *\n   * You would want to do this in case your code is heavily\n   * minified in which case the default mapper cannot use the\n   * simple \"reflection\" to resolve the subject name.\n   *\n   * Note: If you override the subjectMapper this is not used,\n   * bud it can be used manually through `this.registry`.\n   *\n   * @access public\n   * @param {Function} klass A class or constructor function\n   * @param {string} subjectName\n   */\n  register(klass, subjectName) {\n    this.registry.set(klass, subjectName)\n    return this\n  }\n\n  /**\n   * Performs a test if a user can perform action on subject.\n   *\n   * The action is a verb and the subject can be anything the\n   * subjectMapper can map to a subject name.\n   *\n   * E.g. if you can to test if a user can delete a post you would\n   * pass the actual post. Where as if you are testing us a user\n   * can create a post you would pass the class function or a\n   * string.\n   *\n   * ```javascript\n   *   acl->can(user, 'create', Post)\n   *   acl->can(user, 'edit', post)\n   *   acl->can(user, 'edit', post, additionalParameter, secondAdditionalParameter)\n   * ```\n   *\n   * Note that these are also available on the user if you've used\n   * the mixin:\n   *\n   * ```javascript\n   *   user->can('create', Post)\n   *   user->can('edit', post)\n   * ```\n   *\n   * @access public\n   * @param {Object} user\n   * @param {string} verb\n   * @param {Function|Object|string} subject\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  can(user, verb, subject, ...args) {\n    subject = typeof subject === 'undefined' ? GlobalRule : subject\n    const subjectName = this.subjectMapper(subject)\n\n    const policy = this.policies.get(subjectName)\n    const rules = policy || this.rules.get(subjectName)\n\n    if (typeof rules === 'undefined') {\n      if (this.strict) {\n        throw new Error(`Unknown subject \"${subjectName}\"`)\n      }\n      return false\n    }\n\n    if (policy && typeof policy.beforeAll === 'function') {\n      const result = policy.beforeAll(verb, user, subject, subjectName, ...args)\n      if (typeof result !== 'undefined') {\n        return result\n      }\n    }\n\n    if (typeof rules[verb] === 'function') {\n      return Boolean(rules[verb](user, subject, subjectName, ...args))\n    }\n\n    if (this.strict && typeof rules[verb] === 'undefined') {\n      throw new Error(`Unknown verb \"${verb}\"`)\n    }\n\n    return Boolean(rules[verb])\n  }\n\n  /**\n   * Like can but subject is an array where only some has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   * @param {Object} user\n   * @param {Array<Function|Object|string>} subjects\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  some(user, verb, subjects, ...args) {\n    return subjects.some(s => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Like can but subject is an array where all has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   * @param {Object} user\n   * @param {Array<Function|Object|string>} subjects\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  every(user, verb, subjects, ...args) {\n    return subjects.every(s => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Mix in augments your user class with a `can` function object. This\n   * is optional and you can always call `can` directly on your\n   * Acl instance.\n   *\n   * ```\n   * user.can()\n   * user.can.some()\n   * user.can.every()\n   * ```\n   *\n   * @access public\n   * @param {Function} User A user class or contructor function\n   */\n  mixin(User) {\n    const acl = this\n    User.prototype.can = function () {\n      return acl.can(this, ...arguments)\n    }\n    User.prototype.can.every = function () {\n      return acl.every(this, ...arguments)\n    }\n    User.prototype.can.some = function () {\n      return acl.some(this, ...arguments)\n    }\n    return this\n  }\n\n  /**\n   * Rules are grouped by subjects and this default mapper tries to\n   * map any non falsy input to a subject name.\n   *\n   * This is important when you want to try a verb against a rule\n   * passing in an instance of a class.\n   *\n   * - strings becomes subjects\n   * - function's names are used for subject\n   * - objects's constructor name is used for subject\n   *\n   * Override this function if your models do not match this approach.\n   *\n   * E.g. say that you are using plain data objects with a type property\n   * to indicate the \"class\" of the object.\n   *\n   * ```javascript\n   *   acl.subjectMapper = s => typeof s === 'string' ? s : s.type\n   * ```\n   *\n   * `can` will now use this function when you pass in your objects.\n   *\n   * See {@link #register register()} for how to manually map\n   * classes to subject name.\n   *\n   * @access public\n   * @param {Function|Object|string} subject\n   * @returns {string} A subject\n   */\n  subjectMapper(subject) {\n    if (typeof subject === 'string') { return subject }\n    const isFun = typeof subject === 'function'\n    if (isFun && this.registry.has(subject)) { return this.registry.get(subject) }\n    if (!isFun && this.registry.has(subject.constructor)) { return this.registry.get(subject.constructor) }\n    return isFun ? subject.name : subject.constructor.name\n  }\n\n  /**\n   * Removes all rules, policies, and registrations\n   *\n   * @returns {Acl}\n   */\n  reset() {\n    this.rules = new Map()\n    this.policies = new Map()\n    this.registry = new WeakMap()\n    return this\n  }\n\n  /**\n   * Remove rules for subject\n   *\n   * Optionally limit to a single verb.\n   *\n   * @param {Object|Function|String} subject\n   * @param {?String} [verb=null] an optional verb\n   * @returns {Acl}\n   */\n  removeRules(subject, verb = null) {\n    const subjectName = this.subjectMapper(subject)\n    if (this.rules.has(subjectName)) {\n      if (verb) {\n        const rules = this.rules.get(subjectName)\n        delete rules[verb]\n        return this\n      }\n      this.rules.delete(subjectName)\n    }\n    return this\n  }\n\n  /**\n   * Remove policy for subject\n   *\n   * @param {Object|Function|String} subject\n   * @returns {Acl}\n   */\n  removePolicy(subject) {\n    const subjectName = this.subjectMapper(subject)\n    this.policies.delete(subjectName)\n    return this\n  }\n\n  /**\n   * Convenience method for removing all rules and policies for a subject\n   *\n   * @param {Object|Function|String} subject\n   * @returns {Acl}\n   */\n  removeAll(subject) {\n    this.removeRules(subject)\n    this.removePolicy(subject)\n    return this\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js"],"sourceRoot":""}