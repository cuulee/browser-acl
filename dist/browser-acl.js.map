{"version":3,"sources":["/Users/mblarsen/workspace/mblarsen/browser-acl/browser-acl.js","/Users/mblarsen/workspace/mblarsen/browser-acl/webpack/bootstrap 4d6c26260041eed1f27c","/Users/mblarsen/workspace/mblarsen/browser-acl/index.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_classCallCheck","instance","Constructor","TypeError","value","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","Acl","_ref","arguments","undefined","_ref$strict","strict","this","rules","Map","policies","registry","WeakMap","verbs","subject","_this","test","subjectName","subjectMapper","Array","isArray","forEach","verb","set","policy","policy_","klass","user","Error","_len","args","_key","Boolean","apply","concat","subjects","_len2","_key2","_this2","some","can","_len3","_key3","_this3","every","User","acl","slice","isFun","has","constructor"],"mappings":"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","file":"browser-acl.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!************************!*\\\n  !*** multi ./index.js ***!\n  \\************************/\n/*! dynamic exports provided */\n/*! all exports used */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! /Users/mblarsen/workspace/mblarsen/browser-acl/index.js */1);\n\n\n/***/ }),\n/* 1 */\n/*!******************!*\\\n  !*** ./index.js ***!\n  \\******************/\n/*! exports provided: default */\n/*! all exports used */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Simple ACL library for the browser inspired by Laravel's guards and policies.\n * @class Acl\n */\nvar Acl = function () {\n\n  /**\n   * browser-acl\n   *\n   * @access public\n   * @param {Boolean} {strict=false}={} Errors out on unknown verbs when true\n   * @returns {Acl}\n   */\n  function Acl() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$strict = _ref.strict,\n        strict = _ref$strict === undefined ? false : _ref$strict;\n\n    _classCallCheck(this, Acl);\n\n    this.strict = strict;\n    this.rules = new Map();\n    this.policies = new Map();\n    this.registry = new WeakMap();\n  }\n\n  /**\n   * You add rules by providing a verb, a subject and an optional\n   * test (that otherwise defaults to true).\n   *\n   * If the test is a function it will be evaluated with the params:\n   * user, subject, and subjectName. The test value is ultimately evaluated\n   * for thruthiness.\n   *\n   * Examples:\n   *\n   * ```javascript\n   * acl.rule('create', Post)\n   * acl.rule('edit', Post, (user, post) => post.userId === user.id)\n   * acl.rule('edit', Post, (user, post, verb, any, other, value, passed) => true)\n   * acl.rule('delete', Post, false) // deleting disabled\n   * ```\n   *\n   * @access public\n   * @param {Array<string>|string} verbs\n   * @param {Function|Object|string} subject\n   * @param {Boolean} test=true\n   * @returns {Acl}\n   */\n\n\n  _createClass(Acl, [{\n    key: 'rule',\n    value: function rule(verbs, subject) {\n      var _this = this;\n\n      var test = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var subjectName = this.subjectMapper(subject);\n      var verbs_ = Array.isArray(verbs) ? verbs : [verbs];\n      verbs_.forEach(function (verb) {\n        var rules = _this.rules.get(subjectName) || {};\n        rules[verb] = test;\n        _this.rules.set(subjectName, rules);\n      });\n      return this;\n    }\n\n    /**\n     * You can group related rules into policies for a subject. The policies\n     * properties are verbs and they can plain values or functions.\n     *\n     * If the policy is a function it will be new'ed up before use.\n     *\n     * ```javascript\n     *   class Post {\n     *     constructor() {\n     *       this.view = true       // no need for a functon\n     *\n     *       this.delete = false    // not really necessary since an abscent\n     *                              // verb has the same result\n     *     },\n     *     edit(user, post, verb, any, other, value, passed) {\n     *       return post.id === user.id\n     *     }\n     *   }\n     * ```\n     *\n     * Policies are useful for grouping rules and adding more complex logic.\n     *\n     * @access public\n     * @param {Object} policy A policy with properties that are verbs\n     * @param {Function|Object|string} subject\n     * @returns {Acl}\n     */\n\n  }, {\n    key: 'policy',\n    value: function policy(_policy, subject) {\n      var policy_ = typeof _policy === 'function' ? new _policy() : _policy;\n      var subjectName = this.subjectMapper(subject);\n      this.policies.set(subjectName, policy_);\n      return this;\n    }\n\n    /**\n     * Explicitly map a class or constructor function to a name.\n     *\n     * You would want to do this in case your code is heavily\n     * minified in which case the default mapper cannot use the\n     * simple \"reflection\" to resolve the subject name.\n     *\n     * Note: If you override the subjectMapper this is not used,\n     * bud it can be used manually through `this.registry`.\n     *\n     * @access public\n     * @param {Function} klass A class or constructor function\n     * @param {string} subjectName\n     */\n\n  }, {\n    key: 'register',\n    value: function register(klass, subjectName) {\n      this.registry.set(klass, subjectName);\n      return this;\n    }\n\n    /**\n     * Performs a test if a user can perform action on subject.\n     *\n     * The action is a verb and the subject can be anything the\n     * subjectMapper can map to a subject name.\n     *\n     * E.g. if you can to test if a user can delete a post you would\n     * pass the actual post. Where as if you are testing us a user\n     * can create a post you would pass the class function or a\n     * string.\n     *\n     * ```javascript\n     *   acl->can(user, 'create', Post)\n     *   acl->can(user, 'edit', post)\n     *   acl->can(user, 'edit', post, any, other, value, passed)\n     * ```\n     *\n     * Note that these are also available on the user if you've used\n     * the mixin:\n     *\n     * ```javascript\n     *   user->can('create', Post)\n     *   user->can('edit', post)\n     * ```\n     *\n     * @access public\n     * @param {Object} user\n     * @param {string} verb\n     * @param {Function|Object|string} subject\n     * @param {...*} args Any other param is passed into rule\n     * @return Boolean\n     */\n\n  }, {\n    key: 'can',\n    value: function can(user, verb, subject) {\n      var subjectName = this.subjectMapper(subject);\n      var rules = this.policies.get(subjectName) || this.rules.get(subjectName);\n\n      if (typeof rules === 'undefined') {\n        if (this.strict) {\n          throw new Error('Unknown subject \"' + subjectName + '\"');\n        }\n        return false;\n      }\n\n      if (typeof rules[verb] === 'function') {\n        for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n          args[_key - 3] = arguments[_key];\n        }\n\n        return Boolean(rules[verb].apply(rules, [user, subject, subjectName].concat(args)));\n      }\n\n      if (this.strict && typeof rules[verb] === 'undefined') {\n        throw new Error('Unknown verb \"' + verb + '\"');\n      }\n\n      return Boolean(rules[verb]);\n    }\n\n    /**\n     * Like can but subject is an array where only some has to be\n     * true for the rule to match.\n     *\n     * Note the subjects do not need to be of the same kind.\n     *\n     * @access public\n     * @param {Object} user\n     * @param {Array<Function|Object|string>} subjects\n     * @param {...*} args Any other param is passed into rule\n     * @return Boolean\n     */\n\n  }, {\n    key: 'some',\n    value: function some(user, verb, subjects) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        args[_key2 - 3] = arguments[_key2];\n      }\n\n      var _this2 = this;\n\n      return subjects.some(function (s) {\n        return _this2.can.apply(_this2, [user, verb, s].concat(args));\n      });\n    }\n\n    /**\n     * Like can but subject is an array where all has to be\n     * true for the rule to match.\n     *\n     * Note the subjects do not need to be of the same kind.\n     *\n     * @access public\n     * @param {Object} user\n     * @param {Array<Function|Object|string>} subjects\n     * @param {...*} args Any other param is passed into rule\n     * @return Boolean\n     */\n\n  }, {\n    key: 'every',\n    value: function every(user, verb, subjects) {\n      for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n        args[_key3 - 3] = arguments[_key3];\n      }\n\n      var _this3 = this;\n\n      return subjects.every(function (s) {\n        return _this3.can.apply(_this3, [user, verb, s].concat(args));\n      });\n    }\n\n    /**\n     * Mix in augments your user class with a `can` function object. This\n     * is optional and you can always call `can` directly on your\n     * Acl instance.\n     *\n     * ```\n     * user.can()\n     * user.can.some()\n     * user.can.every()\n     * ```\n     *\n     * @access public\n     * @param {Function} User A user class or contructor function\n     */\n\n  }, {\n    key: 'mixin',\n    value: function mixin(User) {\n      var acl = this;\n      User.prototype.can = function () {\n        return acl.can.apply(acl, [this].concat(Array.prototype.slice.call(arguments)));\n      };\n      User.prototype.can.every = function () {\n        return acl.every.apply(acl, [this].concat(Array.prototype.slice.call(arguments)));\n      };\n      User.prototype.can.some = function () {\n        return acl.some.apply(acl, [this].concat(Array.prototype.slice.call(arguments)));\n      };\n      return this;\n    }\n\n    /**\n     * Rules are grouped by subjects and this default mapper tries to\n     * map any non falsy input to a subject name.\n     *\n     * This is important when you want to try a verb against a rule\n     * passing in an instance of a class.\n     *\n     * - strings becomes subjects\n     * - function's names are used for subject\n     * - objects's constructor name is used for subject\n     *\n     * Override this function if your models do not match this approach.\n     *\n     * E.g. say that you are using plain data objects with a type property\n     * to indicate the \"class\" of the object.\n     *\n     * ```javascript\n     *   acl.subjectMapper = s => typeof s === 'string' ? s : s.type\n     * ```\n     *\n     * `can` will now use this function when you pass in your objects.\n     *\n     * See {@link #register register()} for how to manually map\n     * classes to subject name.\n     *\n     * @access public\n     * @param {Function|Object|string} subject\n     * @returns {string} A subject\n     */\n\n  }, {\n    key: 'subjectMapper',\n    value: function subjectMapper(subject) {\n      if (typeof subject === 'string') {\n        return subject;\n      }\n      var isFun = typeof subject === 'function';\n      if (isFun && this.registry.has(subject)) {\n        return this.registry.get(subject);\n      }\n      if (!isFun && this.registry.has(subject.constructor)) {\n        return this.registry.get(subject.constructor);\n      }\n      return isFun ? subject.name : subject.constructor.name;\n    }\n  }]);\n\n  return Acl;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Acl);\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// browser-acl.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d6c26260041eed1f27c","/**\n * Simple ACL library for the browser inspired by Laravel's guards and policies.\n * @class Acl\n */\nclass Acl {\n\n  /**\n   * browser-acl\n   *\n   * @access public\n   * @param {Boolean} {strict=false}={} Errors out on unknown verbs when true\n   * @returns {Acl}\n   */\n  constructor({strict = false} = {}) {\n    this.strict = strict\n    this.rules = new Map()\n    this.policies = new Map()\n    this.registry = new WeakMap()\n  }\n\n  /**\n   * You add rules by providing a verb, a subject and an optional\n   * test (that otherwise defaults to true).\n   *\n   * If the test is a function it will be evaluated with the params:\n   * user, subject, and subjectName. The test value is ultimately evaluated\n   * for thruthiness.\n   *\n   * Examples:\n   *\n   * ```javascript\n   * acl.rule('create', Post)\n   * acl.rule('edit', Post, (user, post) => post.userId === user.id)\n   * acl.rule('edit', Post, (user, post, verb, any, other, value, passed) => true)\n   * acl.rule('delete', Post, false) // deleting disabled\n   * ```\n   *\n   * @access public\n   * @param {Array<string>|string} verbs\n   * @param {Function|Object|string} subject\n   * @param {Boolean} test=true\n   * @returns {Acl}\n   */\n  rule(verbs, subject, test = true) {\n    const subjectName = this.subjectMapper(subject)\n    const verbs_ = Array.isArray(verbs) ? verbs : [verbs]\n    verbs_.forEach(verb => {\n      const rules = this.rules.get(subjectName) || {}\n      rules[verb] = test\n      this.rules.set(subjectName, rules)\n    })\n    return this\n  }\n\n  /**\n   * You can group related rules into policies for a subject. The policies\n   * properties are verbs and they can plain values or functions.\n   *\n   * If the policy is a function it will be new'ed up before use.\n   *\n   * ```javascript\n   *   class Post {\n   *     constructor() {\n   *       this.view = true       // no need for a functon\n   *\n   *       this.delete = false    // not really necessary since an abscent\n   *                              // verb has the same result\n   *     },\n   *     edit(user, post, verb, any, other, value, passed) {\n   *       return post.id === user.id\n   *     }\n   *   }\n   * ```\n   *\n   * Policies are useful for grouping rules and adding more complex logic.\n   *\n   * @access public\n   * @param {Object} policy A policy with properties that are verbs\n   * @param {Function|Object|string} subject\n   * @returns {Acl}\n   */\n  policy(policy, subject) {\n    const policy_ = typeof policy === 'function' ? new policy() : policy\n    const subjectName = this.subjectMapper(subject)\n    this.policies.set(subjectName, policy_)\n    return this\n  }\n\n  /**\n   * Explicitly map a class or constructor function to a name.\n   *\n   * You would want to do this in case your code is heavily\n   * minified in which case the default mapper cannot use the\n   * simple \"reflection\" to resolve the subject name.\n   *\n   * Note: If you override the subjectMapper this is not used,\n   * bud it can be used manually through `this.registry`.\n   *\n   * @access public\n   * @param {Function} klass A class or constructor function\n   * @param {string} subjectName\n   */\n  register(klass, subjectName) {\n    this.registry.set(klass, subjectName)\n    return this\n  }\n\n  /**\n   * Performs a test if a user can perform action on subject.\n   *\n   * The action is a verb and the subject can be anything the\n   * subjectMapper can map to a subject name.\n   *\n   * E.g. if you can to test if a user can delete a post you would\n   * pass the actual post. Where as if you are testing us a user\n   * can create a post you would pass the class function or a\n   * string.\n   *\n   * ```javascript\n   *   acl->can(user, 'create', Post)\n   *   acl->can(user, 'edit', post)\n   *   acl->can(user, 'edit', post, any, other, value, passed)\n   * ```\n   *\n   * Note that these are also available on the user if you've used\n   * the mixin:\n   *\n   * ```javascript\n   *   user->can('create', Post)\n   *   user->can('edit', post)\n   * ```\n   *\n   * @access public\n   * @param {Object} user\n   * @param {string} verb\n   * @param {Function|Object|string} subject\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  can(user, verb, subject, ...args) {\n    const subjectName = this.subjectMapper(subject)\n    let rules = this.policies.get(subjectName) || this.rules.get(subjectName)\n\n    if (typeof rules === 'undefined') {\n      if (this.strict) {\n        throw new Error(`Unknown subject \"${subjectName}\"`)\n      }\n      return false\n    }\n\n    if (typeof rules[verb] === 'function') {\n      return Boolean(rules[verb](user, subject, subjectName, ...args))\n    }\n\n    if (this.strict && typeof rules[verb] === 'undefined') {\n      throw new Error(`Unknown verb \"${verb}\"`)\n    }\n\n    return Boolean(rules[verb])\n  }\n\n  /**\n   * Like can but subject is an array where only some has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   * @param {Object} user\n   * @param {Array<Function|Object|string>} subjects\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  some(user, verb, subjects, ...args) {\n    return subjects.some(s => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Like can but subject is an array where all has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   * @param {Object} user\n   * @param {Array<Function|Object|string>} subjects\n   * @param {...*} args Any other param is passed into rule\n   * @return Boolean\n   */\n  every(user, verb, subjects, ...args) {\n    return subjects.every(s => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Mix in augments your user class with a `can` function object. This\n   * is optional and you can always call `can` directly on your\n   * Acl instance.\n   *\n   * ```\n   * user.can()\n   * user.can.some()\n   * user.can.every()\n   * ```\n   *\n   * @access public\n   * @param {Function} User A user class or contructor function\n   */\n  mixin(User) {\n    const acl = this\n    User.prototype.can = function () {\n      return acl.can(this, ...arguments)\n    }\n    User.prototype.can.every = function () {\n      return acl.every(this, ...arguments)\n    }\n    User.prototype.can.some = function () {\n      return acl.some(this, ...arguments)\n    }\n    return this\n  }\n\n  /**\n   * Rules are grouped by subjects and this default mapper tries to\n   * map any non falsy input to a subject name.\n   *\n   * This is important when you want to try a verb against a rule\n   * passing in an instance of a class.\n   *\n   * - strings becomes subjects\n   * - function's names are used for subject\n   * - objects's constructor name is used for subject\n   *\n   * Override this function if your models do not match this approach.\n   *\n   * E.g. say that you are using plain data objects with a type property\n   * to indicate the \"class\" of the object.\n   *\n   * ```javascript\n   *   acl.subjectMapper = s => typeof s === 'string' ? s : s.type\n   * ```\n   *\n   * `can` will now use this function when you pass in your objects.\n   *\n   * See {@link #register register()} for how to manually map\n   * classes to subject name.\n   *\n   * @access public\n   * @param {Function|Object|string} subject\n   * @returns {string} A subject\n   */\n  subjectMapper(subject) {\n    if (typeof subject === 'string') { return subject }\n    const isFun = typeof subject === 'function'\n    if (isFun && this.registry.has(subject)) { return this.registry.get(subject) }\n    if (!isFun && this.registry.has(subject.constructor)) { return this.registry.get(subject.constructor) }\n    return isFun ? subject.name : subject.constructor.name\n  }\n}\n\nexport default Acl\n\n\n\n// WEBPACK FOOTER //\n// ./index.js"],"sourceRoot":""}